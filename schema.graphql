scalar DateTime
scalar Hash

enum JobStatus {
  QUEUED
  RUNNING
  STOPPING
  DONE
  FAILED
}

enum JobPriority {
  NORMAL
  HIGH
}

enum ProcessStatus {
  RUNNING
  STOPPING
  DONE
  FAILED
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String!
  startCursor: String!
}

type WorkspaceConnection {
  edges: [WorkspaceEdge!]!
  pageInfo: PageInfo!
}

type WorkspaceEdge {
  cursor: String!
  node: Workspace!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

type CommitConnection {
  edges: [CommitEdge!]!
  pageInfo: PageInfo!
}

type CommitEdge {
  cursor: String!
  node: Commit!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String!
  node: Task!
}

type StepConnection {
  edges: [StepEdge!]!
  pageInfo: PageInfo!
}

type StepEdge {
  cursor: String!
  node: Step!
}

type CommandConnection {
  edges: [CommandEdge!]!
  pageInfo: PageInfo!
}

type CommandEdge {
  cursor: String!
  node: Command!
}

type JobConnection {
  edges: [JobEdge!]!
  pageInfo: PageInfo!
}

type JobEdge {
  cursor: String!
  node: Job!
}

type ProcessGroupConnection {
  edges: [ProcessGroupEdge!]!
  pageInfo: PageInfo!
}

type ProcessGroupEdge {
  cursor: String!
  node: ProcessGroup!
}

type ProcessConnection {
  edges: [ProcessEdge!]!
  pageInfo: PageInfo!
}

type ProcessEdge {
  cursor: String!
  node: Process!
}

type LogEntryConnection {
  edges: [LogEntryEdge!]!
  pageInfo: PageInfo!
}

type LogEntryEdge {
  cursor: String!
  node: LogEntry!
}

type User implements Node {
  id: ID!
  workspaces(
    after: String
    before: String
    first: Int
    last: Int
  ): WorkspaceConnection!
  workspace(slug: String!): Workspace
  projects(
    after: String
    before: String
    first: Int
    last: Int
  ): ProjectConnection!
}

type System implements Node {
  id: ID!
  jobs(
    after: String
    before: String
    first: Int
    last: Int
    status: [JobStatus!]
  ): JobConnection!
  processGroups(
    after: String
    before: String
    first: Int
    last: Int
    status: [ProcessStatus!]
  ): ProcessGroupConnection!
  logEntries(
    after: String
    before: String
    first: Int
    last: Int
    level: [LogLevel!]
    ownerId: ID
  ): LogEntryConnection!
  jobMetrics: JobMetrics!
  processMetrics: ProcessMetrics!
  logMetrics: LogMetrics!
}

type Workspace implements Node {
  id: ID!
  slug: String!
  name: String!
  projects(
    after: String
    before: String
    first: Int
    last: Int
  ): ProjectConnection!
  tasks(
    after: String
    before: String
    first: Int
    last: Int
  ): TaskConnection!
  description: String
  notes: String
  isCloning: Boolean!
  isCloned: Boolean!
  isPulling: Boolean!
  isBehind: Boolean!
  isAhead: Boolean!
}

type Project implements Node {
  id: ID!
  slug: String!
  repository: String!
  branch: String!
  description: String
  commits(
    after: String
    before: String
    first: Int
    last: Int
  ): CommitConnection!
  workspace: Workspace!
  isLoadingCommits: Boolean!
  isCloning: Boolean!
  isCloned: Boolean!
  isPulling: Boolean!
  isBehind: Boolean!
  isAhead: Boolean!
}

type Commit implements Node {
  id: ID!
  hash: Hash!
  headline: String!
  message: String!
  author: String!
  date: DateTime!
}

type Task implements Node {
  id: ID!
  name: String!
  steps(
    after: String
    before: String
    first: Int
    last: Int
  ): StepConnection!
  workspace: Workspace!
  isRunning: Boolean!
}

type Step implements Node {
  id: ID!
  projects(
    after: String
    before: String
    first: Int
    last: Int
  ): ProjectConnection!
  commands(
    after: String
    before: String
    first: Int
    last: Int
  ): CommandConnection!
  task: Task!
}

type Command implements Node {
  id: ID!
  command: String!
}

type Job implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: JobStatus!
  priority: JobPriority!
  owner: Node!
}

type ProcessGroup implements Node {
  id: ID!
  createdAt: DateTime!
  status: ProcessStatus!
  task: Task!
  processes(
    after: String
    before: String
    first: Int
    last: Int
  ): ProcessConnection!
}

type Process implements Node {
  id: ID!
  command: String!
  status: ProcessStatus!
  processGroup: ProcessGroup!
  project: Project!
}

type LogEntry implements Node {
  id: ID!
  level: LogLevel!
  createdAt: DateTime!
  message: String!
  owner: Node
}

type JobMetrics implements Node {
  id: ID!
  queued: Int!
  running: Int!
  done: Int!
  failed: Int!
}

type ProcessMetrics implements Node {
  id: ID!
  running: Int!
  done: Int!
  failed: Int!
}

type LogMetrics implements Node {
  id: ID!
  debug: Int!
  info: Int!
  warning: Int!
  error: Int!
}

type Query {
  node(id: ID!): Node
  viewer: User!
  system: System!
}

type Mutation {
  loadProjectCommits(id: String!): Job!
  loadWorkspaceCommits(id: String!): [Job!]!
  cloneProject(id: String!): Job!
  cloneWorkspace(id: String!): [Job!]!
  pullProject(id: String!): Job!
  pullWorkspace(id: String!): [Job!]!
  run(id: String!): Job!
  stopJob(id: String!): Job!
  startProcessGroup(id: String!): ProcessGroup!
  stopProcessGroup(id: String!): ProcessGroup!
  startProcess(id: String!): Process!
  stopProcess(id: String!): Process!
}

type Subscription {
  workspaceUpdated(id: ID): Workspace!
  projectUpdated(id: ID): Project!
  taskUpdated(id: ID): Task!
  jobUpserted(id: ID): Job!
  jobMetricsUpdated(id: ID): JobMetrics!
  processGroupUpserted(id: ID): ProcessGroup!
  processUpserted(id: ID): Process!
  processMetricsUpdated(id: ID): ProcessMetrics!
  logEntryAdded: LogEntry!
  logMetricsUpdated(id: ID): LogMetrics!
}
