scalar DateTime

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  workspaces: [Workspace!]!
  workspace(slug: String!): Workspace
}

type Workspace implements Node {
  id: ID!
  slug: String!
  name: String!
  projects: [Project!]!
  tasks: [Task!]!
  description: String
  notes: String
  isCloning: Boolean!
  isCloned: Boolean!
  isPulling: Boolean!
}

type Project implements Node {
  id: ID!
  slug: String!
  repository: String!
  branch: String!
  description: String
  commits(
    after: String
    before: String
    first: Int
    last: Int
  ): CommitConnection!
  workspace: Workspace!
  isLoadingCommits: Boolean!
  isCloning: Boolean!
  isCloned: Boolean!
  isPulling: Boolean!
}

type Task implements Node {
  id: ID!
  name: String!
  steps: [Step!]!
  workspace: Workspace!
  isRunning: Boolean!
}

type Step implements Node {
  id: ID!
  projects: [Project!]!
  commands: [String!]!
  background: Boolean!
  task: Task!
}

type Commit implements Node {
  id: ID!
  SHA: String!
  headline: String!
  message: String!
  author: String!
  date: DateTime!
}

type CommitConnection {
  edges: [CommitEdge!]!
  pageInfo: PageInfo!
}

type CommitEdge {
  cursor: String!
  node: Commit!
}

type System implements Node {
  id: ID!
  jobs(
    after: String
    before: String
    first: Int
    last: Int
    status: [JobStatus!]
  ): JobConnection!
  jobMetrics: JobMetrics!
  processGroups(
    after: String
    before: String
    first: Int
    last: Int
    status: [ProcessStatus!]
  ): ProcessGroupConnection!
  processMetrics: ProcessMetrics!
  logEntries(
    after: String
    before: String
    first: Int
    last: Int
    level: [LogLevel!]
  ): LogEntryConnection!
  logMetrics: LogMetrics!
}

type Job implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: JobStatus!
  owner: Node!
}

enum JobStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}

type JobConnection {
  edges: [JobEdge!]!
  pageInfo: PageInfo!
}

type JobEdge {
  cursor: String!
  node: Job!
}

type JobMetrics implements Node {
  id: ID!
  queued: Int!
  running: Int!
  done: Int!
  failed: Int!
}

type ProcessGroup implements Node {
  id: ID!
  createdAt: DateTime!
  status: ProcessStatus!
  task: Task!
  processes: [Process!]!
}

enum ProcessStatus {
  RUNNING
  DONE
  FAILED
}

type ProcessGroupConnection {
  edges: [ProcessGroupEdge!]!
  pageInfo: PageInfo!
}

type ProcessGroupEdge {
  cursor: String!
  node: ProcessGroup!
}

type ProcessMetrics implements Node {
  id: ID!
  running: Int!
  done: Int!
  failed: Int!
}

type Process implements Node {
  id: ID!
  command: String!
  status: ProcessStatus!
  processGroup: ProcessGroup!
  project: Project!
}

type LogEntry implements Node {
  id: ID!
  level: LogLevel!
  createdAt: DateTime!
  message: String!
  metaJSON: String!
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
}

type LogEntryConnection {
  edges: [LogEntryEdge!]!
  pageInfo: PageInfo!
}

type LogEntryEdge {
  cursor: String!
  node: LogEntry!
}

type LogMetrics implements Node {
  id: ID!
  debug: Int!
  info: Int!
  warning: Int!
  error: Int!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String!
  startCursor: String!
}

type Query {
  node(id: ID!): Node
  viewer: User!
  system: System!
}

type Mutation {
  loadProjectCommits(id: String!): Job!
  loadWorkspaceCommits(id: String!): [Job!]!
  cloneProject(id: String!): Job!
  cloneWorkspace(id: String!): [Job!]!
  pullProject(id: String!): Job!
  pullWorkspace(id: String!): [Job!]!
  run(id: String!): Job!
}

type Subscription {
  workspaceUpdated(id: ID): Workspace!
  projectUpdated(id: ID): Project!
  taskUpdated(id: ID): Task!
  jobUpserted: Job!
  jobMetricsUpdated: JobMetrics!
  processGroupUpserted: ProcessGroup!
  processUpserted: Process!
  processMetricsUpdated: ProcessMetrics!
  logEntryAdded: LogEntry!
  logMetricsUpdated: LogMetrics!
}
