scalar DateTime

interface Node {
  id: ID!
}

type User {
  id: ID!
  workspaces: [Workspace!]
  workspace(slug: String!): Workspace
  jobs(
    after: String
    before: String
    first: Int
    last: Int
    status: [JobStatus!]
  ): JobConnection
}

type Workspace implements Node {
  id: ID!
  name: String!
  slug: String!
  projects: [Project!]!
  description: String!
  notes: String
}

type Project implements Node {
  id: ID!
  repo: String!
  branch: String!
  commits(
    after: String
    before: String
    first: Int
    last: Int
  ): CommitConnection!
  description: String
  workspace: Workspace!
}

type Commit {
  id: ID!
  headline: String!
  message: String!
  author: String!
  date: DateTime!
}

type CommitConnection {
  edges: [CommitEdge!]!
  pageInfo: PageInfo!
}

type CommitEdge {
  cursor: String!
  node: Commit!
}

type Job implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: JobStatus!
  project: Project!
}

enum JobStatus {
  QUEUED
  RUNNING
  DONE
  FAILED
}

type JobConnection {
  edges: [JobEdge!]!
  pageInfo: PageInfo!
}

type JobEdge {
  cursor: String!
  node: Job!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User!
}

type Mutation {
  cloneProject(id: String!): Job!
  cloneWorkspace(id: String!): [Job!]!
}

type Subscription {
  jobAdded: Job!
  jobUpdated: Job!
}