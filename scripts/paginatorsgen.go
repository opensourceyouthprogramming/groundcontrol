// Copyright 2019 Stratumn
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//+build ignore

package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"text/template"
)

func checkError(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func main() {
	types := flag.String("t", "", "A comma separated list of types")
	filename := flag.String("o", "", "A filename to output the generated code to")
	flag.Parse()

	w := os.Stdout

	if *filename != "" {
		f, err := os.OpenFile(*filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
		checkError(err)

		defer f.Close()
		defer f.Sync()

		w = f
	}

	t, err := template.New("tmpl").Parse(tmpl)
	checkError(err)

	err = t.Execute(w, strings.Split(*types, ","))
	checkError(err)
}

var tmpl = `// Code generated by github.com/stratumn/groundcontrol/scripts/paginatorsgen.go, DO NOT EDIT.

package models

import "github.com/stratumn/groundcontrol/relay"

{{range $index, $type := .}}
// {{$type}}Paginator paginates {{$type}} nodes.
var {{$type}}Paginator = relay.Paginator{
	GetID: func(node interface{}) string {
		return node.({{$type}}).ID
	},
	CreateEdge: func(cursor string, node interface{}) interface{} {
		return {{$type}}Edge{
			Cursor: cursor,
			Node:   node.({{$type}}),
		}
	},
	GetEdgeCursor: func(edge interface{}) string {
		return edge.({{$type}}Edge).Cursor
	},
	EdgeType: {{$type}}Edge{},
}
{{end}}

{{range $index, $type := .}}
// Paginate{{$type}}Slice paginates a slice of {{$type}} nodes.
func Paginate{{$type}}Slice(
	slice []{{$type}}, 
	after *string,
	before *string,
	first *int,
	last *int,
) ({{$type}}Connection, error) {
	res, err := {{$type}}Paginator.Paginate(slice, after, before, first, last);
	if err != nil {
		return {{$type}}Connection{}, err
	}

	return {{$type}}Connection{
		Edges: res.Edges.([]{{$type}}Edge),
		PageInfo: res.PageInfo,
	}, nil
}
{{end -}}
`
