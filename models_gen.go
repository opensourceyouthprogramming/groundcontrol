// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package groundcontrol

import (
	"fmt"
	"io"
	"strconv"
)

type Commit struct {
	ID       string `json:"id"`
	Headline string `json:"headline"`
	Message  string `json:"message"`
	Author   string `json:"author"`
	Date     string `json:"date"`
}

type CommitConnection struct {
	Edges     []CommitEdge `json:"edges"`
	PageInfo  PageInfo     `json:"pageInfo"`
	IsLoading bool         `json:"isLoading"`
}

type CommitEdge struct {
	Cursor string `json:"cursor"`
	Node   Commit `json:"node"`
}

type JobConnection struct {
	Edges    []JobEdge `json:"edges"`
	PageInfo PageInfo  `json:"pageInfo"`
}

type Node interface {
	IsNode()
}

type PageInfo struct {
	HasNextPage     *bool   `json:"hasNextPage"`
	HasPreviousPage *bool   `json:"hasPreviousPage"`
	EndCursor       *string `json:"endCursor"`
	StartCursor     *string `json:"startCursor"`
}

type JobStatus string

const (
	JobStatusQueued  JobStatus = "QUEUED"
	JobStatusRunning JobStatus = "RUNNING"
	JobStatusDone    JobStatus = "DONE"
	JobStatusFailed  JobStatus = "FAILED"
)

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusQueued, JobStatusRunning, JobStatusDone, JobStatusFailed:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
